{"version":3,"sources":["logo.svg","components/AggregatedResult.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AggregatedResult","props","react_default","a","createElement","className","clicks","impressions","SearchBar","_useState","useState","_useState2","Object","slicedToArray","isLoading","setIsLoading","_useState3","_useState4","menuIsOpen","setMenuIsOpen","_useState5","_useState6","options","setOptions","_useState7","_useState8","setClicks","_useState9","_useState10","setImpressions","useEffect","axios","get","then","result","fileData","data","convertCSVtoArray","csv","channels","campaigns","allRowsArray","split","allRowsLength","length","i","rowArray","_","find","label","push","value","id","channel","concat","react_select_browser_esm","onInputChange","inputValue","isSearchable","isFilterable","onChange","selectedOption","hasOwnProperty","filteredCampaings","filter","item","reduce","sum","campaign","isClearable","components_AggregatedResult","App","src","logo","alt","components_SearchBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13724538.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst AggregatedResult = props => {\n\n  return (\n    <div className=\"calculatedResult\">\n      <p>Clicks: <span>{props.clicks}</span></p>\n      <p className=\"calculatedResult-impressions\">Impressions: <span>{props.impressions}</span></p>\n    </div>\n  )\n}\nexport default AggregatedResult;","import React, { useState, useEffect } from 'react';\nimport Select from 'react-select';\nimport AggregatedResult from './AggregatedResult';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nconst SearchBar = props => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const [clicks, setClicks] = useState(0);\n  const [impressions, setImpressions] = useState(0);\n\n  useEffect(() => {\n    axios.get('https://www.mocky.io/v2/5cd93aeb300000b721c014b0').then(result => {\n      const fileData = result.data;\n      convertCSVtoArray(fileData);\n    });\n    return () => {\n    };\n  }, []);\n\n  const convertCSVtoArray = csv => {\n\n    let channels = [];\n    let campaigns = [];\n    const allRowsArray = csv.split(/\\n/);\n    let allRowsLength = allRowsArray.length - 1;\n\n    for (let i = 1; i < allRowsLength; i++ ) {\n      const rowArray = allRowsArray[i].split(',');\n      if (!_.find(channels, { label: rowArray[1] })) {\n        channels.push({ \n          label: rowArray[1],\n          value: i\n        });\n      }\n      \n      campaigns.push(\n        {\n          id: i,\n          channel: rowArray[1],\n          label: rowArray[0],\n          clicks: +rowArray[2], // converting to Number\n          impressions: +rowArray[3]\n        }\n      )\n    }\n\n    setOptions(channels.concat(campaigns));\n    setIsLoading(false);\n  }\n\n  // Calculates clicks and impressions for input selection\n  const handleChange = selectedOption => {\n    if (!selectedOption) {\n      setClicks(0);\n      setImpressions(0);\n      return;\n    }\n    let result = {\n      clicks: 0,\n      impressions: 0\n    }\n    if (selectedOption.hasOwnProperty('clicks')) {\n      let { clicks, impressions } = selectedOption;\n\n      result.clicks = clicks;\n      result.impressions = impressions;\n    } else {\n      let filteredCampaings = _.filter(options, item => (\n        item.channel === selectedOption.label\n      ));\n\n      result = _.reduce(filteredCampaings, function(sum, campaign) {\n          sum.clicks += campaign.clicks;\n          sum.impressions += campaign.impressions;\n          return sum;\n      }, { clicks: 0, impressions: 0 });\n    }\n\n    setClicks(result.clicks);\n    setImpressions(result.impressions);\n  };\n\n  // Shows menu if user entered any data\n  const onInputChange = inputValue => {\n    if (inputValue && !menuIsOpen) {\n      setMenuIsOpen(true);\n    } else if(!inputValue && menuIsOpen){\n      setMenuIsOpen(false);\n    }\n  }\n\n  return (\n    <div className=\"searchBlock\">\n      <p>Choose channel or campaign</p>\n      <Select\n        onInputChange={onInputChange}\n        isSearchable={true}\n        isFilterable={true}\n        onChange={handleChange}\n        menuIsOpen={menuIsOpen}\n        options={ options }\n        isLoading={isLoading}\n        isClearable={true}\n       />\n       <AggregatedResult clicks={clicks} impressions={impressions} />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport logo from './logo.svg';\nimport SearchBar from './components/SearchBar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <SearchBar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}